<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" left="10" top="10" bottom="10" right="10"
		 creationComplete="vgroup1_creationCompleteHandler(event)" 
		 >
	<fx:Script>
		<![CDATA[
			import com.nobook.utils.FFmpegTool;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			private var file:File;
			private var files:Array;

			private var ffmpeg:File = FFmpegTool.getFFmpeg();
			private var index:int = 0;
			
			[Bindable]
			public var data:ArrayCollection;
			[Bindable]
			public var prodData:ArrayCollection;

			protected function button1_clickHandler(event:MouseEvent):void
			{
				file = new File();
				file.browseForOpenMultiple('select videos!', [new FileFilter("Videos (*.mp4,*.mov)", "*.mp4;*.mov")]);
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, selectHandler);
			}
			
			protected function selectHandler(event:FileListEvent):void
			{
				this.files = event.files;
				this.btn.enabled = false;
				var queue:Array = createNativeInfoQueue();
				
				var process:NativeProcess = new NativeProcess();
				process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
				process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
				process.addEventListener(NativeProcessExitEvent.EXIT, onExit);
				process.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
				process.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
				
				execute(process, queue, function():void {
					Alert.show('转换完成');
					btn.enabled = true;
				});
				
				function execute(process:NativeProcess, queue:Array, callback:Function):void {
					var info:* = queue.shift();
					if (!info) {
						callback();
						index = 0;
						return;
					}
					if (info is Function) {
						info();
						execute(process, queue, callback);
					} else {
						process.addEventListener(NativeProcessExitEvent.EXIT, function(e:*):void {
							process.removeEventListener(NativeProcessExitEvent.EXIT, arguments.callee);
							appendText("==> 第" + index + "个视频转换完成\n\n", true);
							execute(process, queue, callback);
						});
						index ++;
						appendText("==> 正在转换第" + index + "个视频", true);
						if (queue.length) {
							appendText("，还剩" + queue.length + "个", true);
						}
						appendText("\n", true);
						process.start(info);
					}
					
				}
			}
			
			private function createNativeInfoQueue():Array {
				var queue:Array = [];
				for (var i:int = 0; i < files.length; i ++) {
					var f:File = files[i];
							
					var selectedData:* = this.comboBox.selectedItem.data;
					
					var startMp4Template:String = File.applicationDirectory.nativePath + '/' + productComboBox.selectedItem.start;
					var endMp4Template:String = File.applicationDirectory.nativePath + '/' + productComboBox.selectedItem.end;
					var scale:String = '-' + selectedData.w + 'x' + selectedData.h;
					
					var tempPath:String = f.parent.nativePath + '/' + f.name.replace('.' + f.extension, '') + scale + '-temp.mp4';
					var outputPath:String = f.parent.nativePath + '/' + f.name.replace('.' + f.extension, '') + scale + '.mp4';
					
					queue.push(this.getConcatVideoNativeInfo(startMp4Template, f.nativePath, endMp4Template, selectedData, outputPath));
				}
				
				return queue;
			}
			
			private function getConcatVideoNativeInfo(startMp4:String, content:String, endMp4:String, data:Object, outputPath:String):NativeProcessStartupInfo {
				var w:int = data.w;
				var h:int = data.h;
				var paramStr:String = '';
				for (var i:int = 0; i < 3; i ++) {
					// paramStr += '[' + i + ':v] scale=w=min(iw*' + h + '/ih\\, ' + w + '):h=min(' + h + '\\,ih*' + w + '/iw), pad=w=' + w + ':h=' + h + ':x=(' + w + '-iw)/2:y=(' + h + '-ih)/2,setdar=16/9  [video' + i + ']; ';
					paramStr += '[' + i + ':v] scale=w=min(iw*' + h + '/ih\\, ' + w + '):h=min(' + h + '\\,ih*' + w + '/iw), pad=w=' + w + ':h=' + h + ':x=(' + w + '-iw)/2:y=(' + h + '-ih)/2,setsar=1/1  [video' + i + ']; ';
				}
				var nativeInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				nativeInfo.executable = ffmpeg;
				nativeInfo.arguments = Vector.<String>(['-y', '-i', startMp4, 
					'-i', content,
					'-i', endMp4,
					'-filter_complex', 
					paramStr + ' [0:a] anull [audio0];[1:a] anull [audio1];[2:a] anull [audio2];' +
					'[video0][audio0][video1][audio1][video2][audio2] concat=n=3:v=1:a=1 [v][a]',
					'-map', '[v]', '-map', '[a]',  '-c:a', 'aac', '-an', '-c:v', 'h264', '-crf', '18', '-preset', 'veryfast', '-f', 'mp4', outputPath
				]);
				return nativeInfo;
			}
			
			public function onOutputData(event:ProgressEvent):void
			{
				var process:NativeProcess = event.currentTarget as NativeProcess;
				appendText(process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));
			}
			
			public function onErrorData(event:ProgressEvent):void
			{
				var process:NativeProcess = event.currentTarget as NativeProcess;
				appendText(process.standardError.readUTFBytes(process.standardError.bytesAvailable));
			}
			
			public function onExit(event:NativeProcessExitEvent):void
			{
				var process:NativeProcess = event.currentTarget as NativeProcess;
				trace("Process exited with ", event.exitCode);
			}
			
			public function onIOError(event:IOErrorEvent):void
			{
				trace(event.toString());
			}
			
			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				var os:String = Capabilities.os; 
				trace(os);

				var urlLoader:URLLoader = new URLLoader(new URLRequest("conf/config.json"));	
				urlLoader.addEventListener(Event.COMPLETE, function(e:Event):void {
					// 赋值
					var obj:Object = JSON.parse(urlLoader.data);
					data = new ArrayCollection(obj.resolution);
					
					prodData = new ArrayCollection(obj['video-templates']);

				});
			}
			
			private function appendText(str:String, force:Boolean = false):void {
				var ary:Array = str.split('\n');
				if (devModeCheckBox.selected === true || force === true) {
					textArea.appendText(str);	
				} else {
					ary.forEach(function(s:*, a:*, b:*):void {
						if (/^frame=/.test(s)) {
							textArea.appendText(s);	
						}
					});
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:HGroup verticalAlign="middle" horizontalAlign="center">
		<s:Label text="视频输出尺寸" height="100%" verticalAlign="middle"/>
		<mx:ComboBox id="comboBox" dataProvider="{data}" labelField="value" selectedIndex="1">
		</mx:ComboBox>
		<s:Spacer width="20"/>
		<s:Label text="片头模板" height="100%" verticalAlign="middle"/>
		<mx:ComboBox id="productComboBox" dataProvider="{prodData}" labelField="name" selectedIndex="1">
		</mx:ComboBox>
		<s:Spacer width="20"/>
		<s:CheckBox label="开发者模式（输出所有日志）" id="devModeCheckBox">
		</s:CheckBox>
	</s:HGroup>
	<s:Button id="btn" label="选择视频" click="button1_clickHandler(event)"/>
	<s:TextArea editable="false" width="100%" height="100%" id="textArea">
		
	</s:TextArea>
</s:VGroup>
